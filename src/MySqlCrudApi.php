<?php
/**
 * @author        	Mark Angelo Angulo
 * @version             1.0
 * @created             12/25/2022
 * @why                 Because Laziness is a Virtue
 */
namespace Mg3lo; use mysqli; use Mg3lo\MySqlCrud; use SimpleXMLElement; class MySqlCrudApi { private $init_config; private $config = array(); private $config_api_key; private $mysqli; private $crud; private $database; private $reference_tables = array(); private $table_columns = array(); private $segment = 3; private $table; private $main_key; private $related_table; private $related_key; private $db_prefix = ''; private $db_table_case = "\155\151\x78\145\144"; private $db_column_case = "\155\x69\170\x65\x64"; private $case; private $format = "\x6a\163\x6f\x6e"; private $envelop = TRUE; private $delimiter = "\54"; private $wrapper = ''; private $force_array = FALSE; private $language; private $upload_files = array(); private $method; private $response = array(); private $rules = array("\x63\x68" => "\x63\x68\145\163", "\x69\x73" => "\145\x73", "\x69\x78" => "\x63\x65\x73", "\163\150" => "\163\x68\145\x73", "\165\155" => "\141", "\165\163" => "\151", "\146" => "\x76\145\x73", "\157" => "\x6f\x65\x73", "\x73" => "\x73\x65\x73", "\170" => "\170\145\163", "\x79" => "\151\145\163", "\x7a" => "\x7a\145\x73"); private $words = array("\141\x64\x64\x65\156\144\165\155" => "\x61\x64\x64\145\156\x64\141", "\x61\x69\162\143\x72\x61\146\164" => "\141\x69\x72\143\162\141\x66\164", "\x61\x6c\x75\x6d\156\141" => "\x61\x6c\x75\155\x6e\141\x65", "\141\154\x75\x6d\156\x75\x73" => "\x61\154\165\x6d\x6e\151", "\141\x6e\141\154\171\x73\x69\x73" => "\141\156\141\154\x79\x73\x65\163", "\x61\x6e\164\145\x6e\x6e\x61" => "\141\156\x74\x65\156\156\x61\145", "\141\156\x74\151\x74\150\x65\x73\151\163" => "\141\156\164\x69\x74\x68\145\163\145\x73", "\141\160\x65\170" => "\141\x70\x69\143\145\x73", "\141\x70\x70\145\x6e\144\x69\x78" => "\x61\160\160\145\156\144\x69\143\x65\163", "\141\x78\151\163" => "\141\x78\x65\x73", "\x62\x61\143\151\x6c\154\x75\163" => "\x62\141\143\x69\154\x6c\151", "\142\x61\x63\x74\145\x72\151\x75\x6d" => "\142\141\143\x74\145\162\x69\x61", "\x62\x61\163\x69\163" => "\142\141\163\145\163", "\142\145\x61\165" => "\142\x65\x61\165\x78", "\142\151\x73\157\156" => "\x62\x69\x73\x6f\x6e", "\x62\165\162\145\141\165" => "\142\x75\x72\x65\141\165\170", "\143\141\x63\x74\165\x73" => '', '', "\143\150\xc3\242\x74\x65\141\x75" => "\x63\150\xc3\xa2\x74\x65\141\x75\x78", "\143\150\151\154\x64" => "\x63\150\151\154\x64\162\x65\156", "\x63\x6f\x64\x65\x78" => "\143\x6f\144\x69\x63\x65\163", "\x63\157\x6e\143\145\x72\x74\157" => "\143\157\x6e\x63\145\162\x74\x69", "\x63\157\162\160\x75\x73" => "\143\x6f\162\160\157\x72\x61", "\x63\162\151\x73\x69\163" => "\143\x72\x69\163\145\x73", "\143\162\151\164\145\x72\151\x6f\x6e" => "\x63\162\x69\x74\145\162\151\x61", "\x63\165\162\162\x69\x63\x75\x6c\165\155" => "\x63\x75\162\x72\x69\143\165\x6c\141", "\144\x61\164\x75\155" => "\x64\x61\164\141", "\144\x65\145\x72" => "\x64\x65\x65\162", "\144\151\141\x67\x6e\157\x73\151\x73" => "\144\151\x61\x67\156\157\x73\x65\163", "\x64\x69\145" => "\144\151\143\x65", "\144\167\141\162\x66" => "\x64\167\x61\x72\x76\145\163", "\145\154\154\x69\160\x73\x69\x73" => "\145\154\154\151\x70\x73\x65\x73", "\x65\x72\x72\x61\x74\x75\x6d" => "\145\x72\x72\x61\x74\141", "\146\141\165\x78\x20\160\141\x73" => "\146\141\165\170\x20\160\141\163", "\146\x65\172" => "\146\x65\x7a\172\x65\x73", "\146\151\163\x68" => "\146\151\x73\x68", "\146\157\143\165\x73" => "\x66\x6f\x63\x69", "\x66\157\157\x74" => "\x66\145\145\164", "\146\x6f\162\155\165\154\141" => "\x66\157\162\155\165\x6c\141\x65", "\146\x75\156\147\x75\163" => "\x66\x75\x6e\x67\x69", "\147\145\x6e\165\x73" => "\147\145\x6e\x65\x72\x61", "\x67\x6f\x6f\x73\x65" => "\x67\145\x65\x73\145", "\147\162\141\146\146\x69\x74\157" => "\147\162\x61\x66\x66\x69\164\151", "\x67\162\157\165\x73\x65" => "\x67\x72\157\x75\x73\x65", "\150\x61\154\x66" => "\x68\141\154\166\145\163", "\x68\x6f\x6f\146" => "\150\x6f\157\x76\145\163", "\150\x79\x70\x6f\x74\x68\x65\163\x69\163" => "\x68\171\x70\157\x74\x68\145\163\145\x73", "\x69\x6e\144\145\170" => "\151\156\144\151\143\x65\163", "\x6c\141\162\166\141" => "\x6c\x61\162\x76\141\x65", "\x6c\151\x62\x72\x65\x74\x74\157" => "\x6c\x69\142\x72\145\x74\x74\x69", "\x6c\x6f\141\146" => "\x6c\x6f\x61\x76\145\x73", "\154\157\143\165\x73" => "\x6c\x6f\143\151", "\x6c\x6f\x75\x73\145" => "\x6c\x69\143\145", "\155\141\156" => "\155\x65\156", "\155\x61\x74\162\151\x78" => "\x6d\x61\164\x72\151\x63\x65\163", "\155\x65\x64\151\x75\x6d" => "\155\x65\144\151\141", "\x6d\x65\x6d\x6f\x72\x61\156\x64\x75\x6d" => "\155\x65\155\157\162\x61\x6e\144\141", "\155\x69\x6e\165\x74\x69\141" => "\155\151\x6e\x75\x74\x69\141\145", "\155\157\x6f\x73\x65" => "\x6d\157\157\163\x65", "\155\157\165\163\145" => "\155\151\x63\145", "\x6e\x65\142\x75\x6c\x61" => "\x6e\145\142\x75\154\141\x65", "\x6e\165\x63\x6c\x65\x75\163" => "\156\x75\143\x6c\145\151", "\157\141\x73\x69\163" => "\157\x61\x73\145\163", "\x6f\146\146\x73\160\162\151\x6e\147" => "\x6f\x66\146\163\160\x72\151\156\x67", "\157\160\165\x73" => "\157\x70\x65\162\141", "\x6f\166\x75\155" => "\157\166\x61", "\x6f\170" => "\157\170\145\x6e", "\160\x61\162\x65\x6e\x74\x68\145\x73\x69\163" => "\160\141\162\145\156\164\x68\145\163\145\x73", "\x70\x68\145\x6e\157\x6d\145\156\x6f\156" => "\x70\x68\145\156\x6f\155\x65\x6e\141", "\160\x68\171\x6c\165\x6d" => "\160\150\171\154\141", "\x71\x75\x69\172" => "\161\x75\151\172\x7a\x65\163", "\162\x61\x64\x69\165\163" => "\x72\141\x64\x69\151", "\162\x65\x66\x65\x72\145\156\x64\165\155" => "\162\x65\x66\x65\162\145\x6e\x64\x61", "\x73\141\x6c\155\157\156" => "\163\141\154\x6d\x6f\x6e", "\x73\x63\x61\162\x66" => "\x73\143\x61\162\166\145\x73", "\163\145\154\x66" => "\163\145\x6c\166\145\x73", "\163\145\x72\x69\x65\x73" => "\x73\145\162\151\x65\163", "\163\150\x65\x65\160" => "\x73\150\145\x65\160", "\x73\x68\x72\151\x6d\160" => "\x73\x68\x72\151\x6d\160", "\x73\160\145\143\151\x65\163" => "\163\160\145\x63\x69\145\x73", "\163\x74\x69\155\165\x6c\x75\x73" => "\x73\164\x69\x6d\x75\154\151", "\x73\x74\162\x61\x74\x75\x6d" => "\x73\164\162\x61\x74\x61", "\163\x77\x69\x6e\x65" => "\x73\167\x69\156\145", "\163\x79\154\154\141\x62\x75\x73" => "\x73\x79\154\154\x61\142\151", "\163\171\x6d\160\157\163\151\165\x6d" => "\163\x79\155\160\157\x73\x69\141", "\163\x79\x6e\x6f\160\163\151\x73" => "\x73\x79\156\157\x70\x73\x65\x73", "\164\x61\x62\x6c\x65\x61\x75" => "\164\141\x62\154\x65\x61\x75\x78", "\x74\x68\145\163\151\163" => "\164\x68\x65\x73\145\x73", "\164\150\151\145\146" => "\x74\150\151\145\166\x65\x73", "\x74\157\157\164\150" => "\x74\145\x65\x74\x68", "\164\x72\157\165\x74" => "\x74\x72\x6f\165\x74", "\x74\165\x6e\x61" => "\x74\x75\x6e\x61", "\x76\x65\x72\x74\145\142\162\141" => "\x76\x65\162\164\x65\142\162\141\x65", "\166\145\x72\x74\145\170" => "\x76\x65\162\x74\x69\143\145\x73", "\166\151\x74\141" => "\x76\151\x74\141\145", "\x76\157\x72\164\x65\x78" => "\x76\x6f\x72\164\x69\x63\x65\x73", "\167\x68\x61\x72\x66" => "\x77\x68\x61\162\x76\145\x73", "\x77\151\146\x65" => "\x77\151\x76\x65\163", "\167\x6f\x6c\146" => "\x77\x6f\154\x76\145\163", "\167\157\155\x61\x6e" => "\x77\x6f\155\145\x6e"); public function __construct($config, $language = array()) { $this->init_config = $config; if (!file_exists(dirname(__FILE__) . DIRECTORY_SEPARATOR . "\143\157\156\146\151\147" . DIRECTORY_SEPARATOR . "\115\x79\123\161\154\x43\162\165\x64\x41\x70\x69\56\160\x68\160")) { goto F3f90; } $this->config = (include dirname(__FILE__) . DIRECTORY_SEPARATOR . "\143\157\x6e\146\151\147" . DIRECTORY_SEPARATOR . "\115\171\x53\x71\154\x43\x72\165\x64\x41\x70\151\56\160\x68\x70"); F3f90: $this->crud = new MySqlCrud($config); if (empty($this->config)) { goto c709a; } $this->config = $this->crud->recursive_change_array_keys_case($this->config, "\x75\x6e\x64\x65\x72\x73\x63\x6f\162\145"); c709a: $language_array = isset($this->config["\154\141\156\147\x75\141\x67\145"]) ? $this->config["\154\x61\x6e\147\x75\141\147\145"] : []; $this->language = array_replace($language_array, $language); $this->db_table_case = $this->crud->get_db_table_case(); $this->db_column_case = $this->crud->get_db_column_case(); $host = isset($config["\x68\x6f\x73\x74"]) ? $config["\150\x6f\163\164"] : "\154\157\x63\x61\154\150\x6f\163\164"; $username = isset($config["\x75\x73\x65\162\x6e\141\155\x65"]) ? $config["\x75\x73\145\162\156\x61\155\145"] : "\x72\157\157\164"; $password = isset($config["\160\141\x73\x73\167\x6f\x72\x64"]) ? $config["\160\141\163\163\x77\157\162\x64"] : ''; $this->database = isset($config["\144\x61\164\141\142\141\163\x65"]) ? $config["\x64\141\x74\141\142\141\x73\145"] : "\x64\141\x74\x61\142\x61\163\145\137\156\x61\155\145"; $port = isset($config["\x70\157\162\164"]) ? $config["\x70\157\x72\164"] : NULL; $socket = isset($config["\163\x6f\143\153\x65\x74"]) ? $config["\x73\x6f\143\x6b\x65\164"] : NULL; $this->db_prefix = isset($config["\x64\142\x5f\x70\162\145\x66\151\x78"]) ? $config["\x64\x62\137\x70\x72\145\146\x69\x78"] : ''; $this->mysqli = new mysqli($host, $username, $password, $this->database, $port, $socket); $this->config_api_key = isset($this->config["\141\x70\x69\x5f\153\145\171"]) ? $this->config["\x61\x70\151\x5f\153\x65\x79"] : NULL; $this->segment = isset($this->config["\x75\x72\154\137\163\145\147\x6d\x65\x6e\x74"]) ? $this->config["\x75\162\x6c\137\163\145\147\x6d\x65\156\164"] : $this->segment; $this->case = isset($this->config["\143\141\163\145"]) ? $this->config["\143\x61\x73\x65"] : $this->case; $this->delimiter = isset($this->config["\144\x65\154\151\155\x69\x74\x65\162"]) ? $this->config["\x64\145\154\x69\155\x69\164\x65\162"] : $this->delimiter; $this->envelop = isset($this->config["\x65\x6e\166\x65\154\x6f\x70"]) ? $this->config["\145\x6e\x76\x65\154\157\x70"] : $this->envelop; $this->force_array = isset($this->config["\x66\157\x72\x63\x65\x5f\x61\x72\162\x61\x79"]) ? $this->config["\146\x6f\x72\143\x65\137\x61\162\x72\141\x79"] : $this->force_array; $this->format = isset($this->config["\x66\x6f\162\x6d\141\x74"]) ? $this->config["\146\x6f\162\155\141\164"] : $this->format; $this->wrapper = isset($this->config["\x77\162\141\160\160\145\162"]) ? $this->config["\167\x72\141\x70\160\145\162"] : $this->wrapper; $timezone = isset($this->config["\164\x69\155\x65\172\157\156\145"]) ? $this->config["\164\x69\155\x65\x7a\157\x6e\145"] : "\x55\124\x43"; date_default_timezone_set($timezone); } public function __debugInfo() { return ["\143\154\141\x73\163" => "\x4d\171\123\161\154\x43\162\x75\144\101\160\x69"]; } public function manage() { if (!(isset($_SERVER["\103\x4f\x4e\x54\105\x4e\x54\137\x4c\105\116\x47\x54\x48"]) && $_SERVER["\x43\x4f\116\x54\105\116\124\137\x4c\x45\x4e\x47\124\x48"] > (int) ini_get("\x70\157\x73\x74\137\155\x61\x78\x5f\163\151\172\x65") * 1024 * 1024)) { goto D9eaf; } $this->response[$this->crud->change_case($this->_lang("\x73\164\x61\x74\165\163"), $this->case)] = $this->_lang("\x66\x61\x69\154\145\144"); $this->response[$this->crud->change_case($this->_lang("\x63\157\144\145"), $this->case)] = 400; $this->response[$this->crud->change_case($this->_lang("\155\145\163\163\141\147\x65"), $this->case)] = $this->_lang("\146\x69\154\145\137\x74\x6f\157\x5f\154\x61\x72\x67\x65"); $this->_response(); D9eaf: $segments = explode("\x2f", trim(parse_url($_SERVER["\x52\105\x51\125\105\123\124\x5f\x55\122\111"], PHP_URL_PATH), "\57")); $table = $segments[$this->segment]; $this->table = $this->crud->change_case($table, $this->db_table_case); $this->main_key = isset($segments[(int) $this->segment + 1]) ? $segments[(int) $this->segment + 1] : NULL; $related_table = isset($segments[(int) $this->segment + 2]) ? $segments[(int) $this->segment + 2] : NULL; $this->related_table = !empty($related_table) ? $this->crud->change_case($related_table, $this->db_table_case) : NULL; $this->related_key = isset($segments[(int) $this->segment + 3]) ? $segments[(int) $this->segment + 3] : NULL; $header_params = []; foreach ($_SERVER as $key => $value) { if (!(substr($key, 0, 5) == "\x48\x54\124\120\x5f")) { goto e743a; } $header_params[str_replace("\40", "\55", ucwords(strtolower(str_replace("\137", "\40", substr($key, 5)))))] = $value; e743a: f03ec: } C17e7: $this->header_params = $this->crud->recursive_change_array_keys_case($header_params, "\x75\156\144\145\x72\163\x63\157\x72\x65"); $get_params = $_GET; $this->get_params = !empty($get_params) ? $this->crud->recursive_change_array_keys_case($get_params, "\x75\156\x64\x65\x72\163\x63\157\162\145") : []; $method = strtolower(filter_input(INPUT_SERVER, "\122\x45\x51\x55\105\x53\x54\137\115\105\x54\110\x4f\x44", FILTER_UNSAFE_RAW)); if (!empty($method)) { goto Cfe97; } $method = !empty($_SERVER["\122\x45\121\125\x45\x53\124\x5f\115\105\124\x48\117\104"]) ? strtolower($_SERVER["\122\x45\x51\x55\x45\123\124\137\115\105\x54\x48\x4f\104"]) : "\x67\145\164"; Cfe97: if (!isset($_POST["\x5f\155\x65\164\x68\157\x64"])) { goto a9a8c; } $method = strtolower(filter_input(INPUT_POST, "\137\x6d\145\164\150\157\x64", FILTER_UNSAFE_RAW)); a9a8c: if (!isset($_SERVER["\110\124\124\x50\137\x58\x5f\x48\x54\x54\120\x5f\115\105\x54\110\x4f\x44\137\x4f\126\x45\x52\122\x49\x44\105"])) { goto Aaadf; } $method = strtolower(filter_input(INPUT_SERVER, "\x48\x54\x54\x50\x5f\x58\137\110\x54\x54\120\137\115\x45\x54\110\x4f\104\x5f\117\x56\105\122\122\x49\104\x45", FILTER_UNSAFE_RAW)); Aaadf: $get_api_key = isset($this->get_params["\x61\x70\x69\x5f\x6b\145\x79"]) ? $this->get_params["\x61\160\151\x5f\153\x65\171"] : null; $api_key = isset($this->header_params["\141\160\x69\137\153\145\171"]) ? $this->header_params["\141\x70\x69\x5f\153\145\171"] : $get_api_key; if (!($this->config_api_key != $api_key)) { goto E8834; } $this->response[$this->crud->change_case($this->_lang("\163\x74\x61\x74\x75\163"), $this->case)] = $this->_lang("\x66\141\151\x6c\x65\144"); $this->response[$this->crud->change_case($this->_lang("\x63\157\144\145"), $this->case)] = 400; $this->response[$this->crud->change_case($this->_lang("\155\x65\x73\163\x61\x67\x65"), $this->case)] = $this->_lang("\151\x6e\x76\141\154\x69\x64\137\x61\x70\151\x5f\x6b\x65\x79"); $this->_response(); E8834: if (empty($this->get_params["\167\x69\164\x68"])) { goto A6370; } if (is_array($this->get_params["\x77\151\x74\150"])) { goto F7861; } if (is_string($this->get_params["\167\x69\x74\150"])) { goto f039b; } unset($this->get_params["\x77\x69\164\150"]); goto eddb5; f039b: $with_columns = explode("\x3b", $this->get_params["\x77\151\164\150"]); foreach ($with_columns as $with_column) { $this->with[] = $with_column; $table_with_column = explode("\72", $with_column); $cased_table_name = $this->db_prefix . $table_with_column[0]; $this->reference_tables[] = $this->crud->change_case($cased_table_name, $this->db_table_case); Ebc40: } b9072: eddb5: goto e4045; F7861: foreach ($this->get_params["\x77\x69\x74\150"] as $with_column) { $this->with[] = $with_column; $table_with_column = explode("\72", $with_column); $cased_table_name = $this->db_prefix . $table_with_column[0]; $this->reference_tables[] = $this->crud->change_case($cased_table_name, $this->db_table_case); Dde70: } D52d0: e4045: A6370: if (empty($this->get_params["\x68\141\x73"])) { goto be0b3; } if (is_array($this->get_params["\150\141\163"])) { goto E6358; } if (is_string($this->get_params["\150\x61\163"])) { goto Ba62c; } unset($this->get_params["\x68\x61\x73"]); goto C59a8; Ba62c: $has_columns = explode("\73", $this->get_params["\150\x61\163"]); foreach ($has_columns as $has_column) { $this->has[] = $has_column; $table_has_column = explode("\x3a", $has_column); $cased_table_name = $this->db_prefix . $table_has_column[0]; $this->reference_tables[] = $this->crud->change_case($cased_table_name, $this->db_table_case); a948e: } A0801: C59a8: goto be29b; E6358: foreach ($this->get_params["\x68\141\x73"] as $has_column) { $this->has[] = $has_column; $table_has_column = explode("\72", $has_column); $cased_table_name = $this->db_prefix . $table_has_column[0]; $this->reference_tables[] = $this->crud->change_case($cased_table_name, $this->db_table_case); d3091: } A874c: be29b: be0b3: if (empty($this->get_params["\150\x61\x73\x5f\156\x6f"])) { goto da444; } if (is_array($this->get_params["\x68\141\163\x5f\156\157"])) { goto c187e; } if (is_string($this->get_params["\150\x61\x73\x5f\x6e\157"])) { goto Ed458; } unset($this->get_params["\x68\141\163\x5f\156\x6f"]); goto Dd1ef; Ed458: $has_no_columns = explode("\x3b", $this->get_params["\x68\141\x73\137\156\157"]); foreach ($has_no_columns as $has_no_column) { $this->has_no[] = $has_no_column; $table_has_no_column = explode("\x3a", $has_no_column); $cased_table_name = $this->db_prefix . $table_has_no_column[0]; $this->reference_tables[] = $this->crud->change_case($cased_table_name, $this->db_table_case); Ac784: } A4c01: Dd1ef: goto ab446; c187e: foreach ($this->get_params["\150\141\163\x5f\156\157"] as $has_no_column) { $this->has_no[] = $has_no_column; $table_has_no_column = explode("\72", $has_no_column); $cased_table_name = $this->db_prefix . $table_has_no_column[0]; $this->reference_tables[] = $this->crud->change_case($cased_table_name, $this->db_table_case); eaade: } b2a34: ab446: da444: $with_total_sorters = []; if (empty($this->get_params["\167\x69\x74\150\137\x63\157\165\156\164"])) { goto b172e; } if (is_array($this->get_params["\x77\151\164\x68\x5f\x63\157\x75\x6e\x74"])) { goto a3e94; } if (is_string($this->get_params["\167\151\164\x68\137\143\157\x75\156\x74"])) { goto B354d; } unset($this->get_params["\x77\151\164\x68\137\x63\157\165\x6e\x74"]); goto a753f; B354d: $with_columns = explode("\73", $this->get_params["\167\151\164\x68\137\143\x6f\165\156\x74"]); foreach ($with_columns as $with_column) { $this->with_count[] = $with_column; $cased_table_name = $this->db_prefix . $with_column; $this->reference_tables[] = $this->crud->change_case($cased_table_name, $this->db_table_case); $first_tables = explode("\x2e", $with_column); $with_total_sorter = $this->_lang("\164\x6f\164\141\154\137") . $first_tables[0]; $with_total_sorters[] = $this->crud->change_case($with_total_sorter, $this->db_column_case); Ceec1: } de048: a753f: goto Ee1e2; a3e94: foreach ($this->get_params["\167\151\164\x68\137\143\157\x75\156\x74"] as $with_count_column) { $this->with_count[] = $with_count_column; $table_with_count_column = explode("\x3a", $with_count_column); $cased_table_name = $this->db_prefix . $table_with_count_column[0]; $this->reference_tables[] = $this->crud->change_case($cased_table_name, $this->db_table_case); $first_tables = explode("\56", $with_count_column); $with_total_sorter = $this->_lang("\164\157\x74\x61\x6c\137") . $first_tables[0]; $with_total_sorters[] = $this->crud->change_case($with_total_sorter, $this->db_column_case); f72af: } cca89: Ee1e2: b172e: $has_total_sorters = []; if (empty($this->get_params["\150\x61\163\137\x63\157\x75\x6e\x74"])) { goto eb531; } if (is_array($this->get_params["\x68\x61\x73\x5f\x63\x6f\165\156\164"])) { goto df9a7; } if (is_string($this->get_params["\x68\x61\163\x5f\x63\157\x75\156\x74"])) { goto Fe9e9; } unset($this->get_params["\x68\141\x73\137\143\157\x75\156\164"]); goto D52f4; Fe9e9: $has_columns = explode("\73", $this->get_params["\x68\x61\163\137\143\157\x75\x6e\x74"]); foreach ($has_columns as $has_column) { $this->has_count[] = $has_column; $cased_table_name = $this->db_prefix . $has_column; $this->reference_tables[] = $this->crud->change_case($cased_table_name, $this->db_table_case); $first_tables = explode("\x2e", $has_column); $with_total_sorter = $this->_lang("\x74\x6f\x74\x61\154\x5f") . $first_tables[0]; $with_total_sorters[] = $this->crud->change_case($with_total_sorter, $this->db_column_case); aeec0: } cf8dd: D52f4: goto A9f64; df9a7: foreach ($this->get_params["\150\141\x73\x5f\x63\157\x75\156\164"] as $has_count_column) { $this->has_count[] = $has_count_column; $table_has_count_column = explode("\72", $has_count_column); $cased_table_name = $this->db_prefix . $table_has_count_column[0]; $this->reference_tables[] = $this->crud->change_case($cased_table_name, $this->db_table_case); $first_tables = explode("\x2e", $has_count_column); $with_total_sorter = $this->_lang("\164\157\164\x61\154\x5f") . $first_tables[0]; $with_total_sorters[] = $this->crud->change_case($with_total_sorter, $this->db_column_case); Da56b: } d29e8: A9f64: eb531: $this->reference_tables[] = $this->db_prefix . $this->table; if (empty($this->related_table)) { goto Ee295; } $cased_table_name = $this->db_prefix . $this->related_table; $this->reference_tables[] = $cased_table_name; Ee295: $this->_get_table_columns(); $yes_values = ["\x79\145\163", "\164\162\165\145", "\61", 1]; $this->case = empty($this->_get_parameter("\x63\141\x73\145")) ? $this->case : $this->_get_parameter("\143\141\x73\145"); $this->format = $this->_get_parameter("\x66\x6f\x72\155\141\164") ? $this->_get_parameter("\x66\157\162\155\141\x74") : $this->format; $this->wrapper = $this->_get_parameter("\x77\162\141\160\160\x65\x72"); $envelop = $this->_get_parameter("\x65\x6e\x76\145\x6c\157\160"); if (empty($envelop)) { goto E22d5; } $this->envelop = in_array($envelop, $yes_values) ? TRUE : FALSE; E22d5: $delimiter = $this->_get_parameter("\x64\x65\x6c\151\x6d\151\164\145\x72"); if (empty($delimiter)) { goto Fa5bb; } $this->delimiter = $delimiter; Fa5bb: $force_array = $this->_get_parameter("\x66\x6f\162\x63\x65\x5f\x61\x72\162\141\171"); if (empty($force_array)) { goto b4291; } $this->force_array = in_array($force_array, $yes_values) ? TRUE : FALSE; b4291: if (isset($this->table_columns[$this->table])) { goto A0b40; } $this->response[$this->crud->change_case($this->_lang("\163\164\141\x74\165\x73"), $this->case)] = $this->_lang("\x66\x61\151\154\x65\144"); $this->response[$this->crud->change_case($this->_lang("\x63\157\x64\x65"), $this->case)] = 404; $this->response[$this->crud->change_case($this->_lang("\x6d\145\163\x73\141\x67\145"), $this->case)] = $this->_lang("\156\157\164\x5f\x66\157\165\156\144"); $this->_response(); A0b40: if (!(!empty($this->related_table) && !isset($this->table_columns[$this->related_table]))) { goto a7993; } $this->response[$this->crud->change_case($this->_lang("\x73\164\141\164\x75\x73"), $this->case)] = $this->_lang("\x66\141\151\x6c\x65\144"); $this->response[$this->crud->change_case($this->_lang("\143\157\x64\145"), $this->case)] = 404; $this->response[$this->crud->change_case($this->_lang("\x6d\145\163\163\x61\x67\145"), $this->case)] = $this->_lang("\x6e\157\x74\137\x66\x6f\165\156\144"); $this->_response(); a7993: $this->response[$this->crud->change_case($this->_lang("\163\x74\x61\164\165\x73"), $this->case)] = $this->_lang("\x66\141\x69\154\x65\144"); $this->response[$this->crud->change_case($this->_lang("\x63\x6f\x64\145"), $this->case)] = 400; $this->response[$this->crud->change_case($this->_lang("\155\x65\x73\x73\x61\147\x65"), $this->case)] = $this->_lang("\151\x6e\x76\141\x6c\x69\x64\x5f\x70\x61\x72\141\155\145\164\145\x72\163"); if (!($method === "\x67\x65\164")) { goto fb704; } $this->_get(); fb704: if (!($method === "\x70\x6f\x73\x74")) { goto Eac51; } $this->_post(); Eac51: if (!($method === "\x70\165\164" || $method === "\160\x61\x74\x63\150")) { goto b50a7; } $this->_patch(); b50a7: if (!($method === "\x64\145\x6c\x65\164\x65")) { goto Abc21; } $this->_delete(); Abc21: } public function config($key) { $key_case = $this->crud->change_case($key, "\x75\156\144\145\x72\x73\x63\x6f\x72\145"); return isset($this->config[$key_case]) ? $this->config[$key_case] : NULL; } private function _get_parameter($index) { return isset($this->get_params[$index]) && !empty($this->get_params[$index]) ? $this->get_params[$index] : NULL; } private function _get() { $base_table = $this->table; $query = $this->crud->table($this->table); if (empty($this->main_key)) { goto a01e5; } $query = $query->find($this->main_key, $this->related_table); a01e5: if (empty($this->related_key)) { goto D7c68; } $query = $query->find($this->related_key); D7c68: if (empty($this->with_count)) { goto C43c1; } foreach ($this->with_count as $with_count) { $query = $query->with_count($this->crud->change_case($with_count, $this->db_table_case)); De35d: } f1332: C43c1: if (empty($this->with)) { goto Dd310; } foreach ($this->with as $with) { $query = $query->with($this->crud->change_case($with, $this->db_table_case)); A8e42: } Ea097: Dd310: if (empty($this->has_count)) { goto d21d4; } foreach ($this->has_count as $has_count) { $query = $query->has_count($this->crud->change_case($has_count, $this->db_table_case)); Dbfee: } aea18: d21d4: if (empty($this->has)) { goto e3e62; } foreach ($this->has as $has) { $query = $query->has($this->crud->change_case($has, $this->db_table_case)); d7a76: } De311: e3e62: if (empty($this->has_no)) { goto D3966; } foreach ($this->has_no as $has_no) { $query = $query->has_no($this->crud->change_case($has_no, $this->db_table_case)); E7f41: } A207e: D3966: if (!(empty($this->get_params["\x63\x61\163\145"]) && $this->case != $this->db_column_case)) { goto Ed650; } $query = $query->switch_case($this->case); Ed650: $query = $query->filter(); $res = $query->get(); $total = $query->get_result_count(); if (!($res === FALSE || !empty($this->crud->get_validation_errors()))) { goto a3d15; } $this->response[$this->crud->change_case("\145\162\162\x6f\x72\x73", $this->case)] = $this->crud->get_validation_errors(); $this->_response(); a3d15: if (!(is_array($res) && empty($res) && (!empty($this->main_key) && empty($this->related_table) || !empty($this->related_key)))) { goto Cb841; } $this->response[$this->crud->change_case($this->_lang("\x73\164\x61\x74\165\163"), $this->case)] = $this->_lang("\146\x61\151\154\145\144"); $this->response[$this->crud->change_case($this->_lang("\x63\x6f\x64\145"), $this->case)] = 404; $this->response[$this->crud->change_case($this->_lang("\155\x65\x73\163\x61\147\x65"), $this->case)] = $this->_lang("\x6e\157\x74\x5f\146\x6f\x75\x6e\144"); $this->_response(); Cb841: if (empty($this->related_key)) { goto d3847; } $singular_name = $this->_singular($this->related_table); $human_name = $this->crud->change_case($singular_name, "\150\x75\x6d\141\x6e"); $cased_name = $this->crud->change_case($singular_name, $this->case); d3847: if (!(!empty($this->related_table) && empty($this->related_key))) { goto Ccda1; } $plural_name = $this->_plural($this->related_table); $human_name = $this->crud->change_case($plural_name, "\150\x75\x6d\141\156"); $cased_name = $this->crud->change_case($plural_name, $this->case); $count_name = $this->crud->change_case($this->_lang("\x63\157\165\x6e\x74\x5f") . "{$cased_name}", $this->case); $total_name = $this->crud->change_case($this->_lang("\x74\157\x74\141\x6c\x5f") . "{$cased_name}", $this->case); Ccda1: if (!(!empty($this->main_key) && empty($this->related_table))) { goto D37f4; } $singular_name = $this->_singular($this->table); $human_name = $this->crud->change_case($singular_name, "\x68\165\155\x61\x6e"); $cased_name = $this->crud->change_case($singular_name, $this->case); D37f4: if (!empty($this->main_key)) { goto D1f8f; } $plural_name = $this->_plural($this->table); $human_name = $this->crud->change_case($plural_name, "\x68\165\155\x61\156"); $cased_name = $this->crud->change_case($plural_name, $this->case); $count_name = $this->crud->change_case($this->_lang("\x63\x6f\x75\156\164\137") . "{$cased_name}", $this->case); $total_name = $this->crud->change_case($this->_lang("\x74\x6f\164\x61\154\137") . "{$cased_name}", $this->case); D1f8f: $this->response[$this->crud->change_case($this->_lang("\163\x74\x61\164\165\x73"), $this->case)] = $this->_lang("\163\165\x63\143\x65\x73\163"); $this->response[$this->crud->change_case($this->_lang("\143\x6f\144\x65"), $this->case)] = $total == 0 ? 204 : 200; $this->response[$this->crud->change_case($this->_lang("\x6d\x65\163\163\141\147\145"), $this->case)] = $this->_lang("\x72\145\163\160\157\156\x73\145") . "\40" . $human_name; $this->response[$this->crud->change_case($this->_lang("\x66\x65\164\x63\150\137\144\x61\164\x65"), $this->case)] = date("\x59\x2d\x6d\55\x64\40\x48\x3a\151\x3a\x73"); if (!isset($count_name)) { goto C190f; } $this->response[$count_name] = count($res); C190f: if (!isset($total_name)) { goto f5182; } $this->response[$total_name] = $total; f5182: $this->_response($res, $cased_name); } private function _post() { $base_table = !empty($this->related_table) ? $this->related_table : $this->table; $data = $this->_upload_files($base_table); $query = $this->crud; if (!empty($this->main_key) && !empty($this->related_table)) { goto d111d; } $query = $query->table($this->table); goto C3a44; d111d: $query = $query->table($this->table)->find($this->main_key, $this->related_table); C3a44: if (empty($this->with)) { goto a3e02; } foreach ($this->with as $with) { $query = $query->with($this->crud->change_case($with, $this->db_table_case)); F5a7b: } Cdbe9: a3e02: if (empty($this->has)) { goto Be09c; } foreach ($this->has as $has) { $query = $query->has($this->crud->change_case($has, $this->db_table_case)); edfa2: } f71dc: Be09c: $fc_attach = $this->crud->change_case("\x61\x74\x74\141\143\150", $this->db_column_case); if (!(!empty($data[$fc_attach]) && is_array($data[$fc_attach]))) { goto D62fa; } foreach ($data[$fc_attach] as $key => $attach) { $fc_key = $this->crud->change_case($key, $this->db_table_case); $query = $query->attach($fc_key, $attach); dd3bd: } B4015: unset($data[$fc_attach]); D62fa: if (!(empty($this->get_params["\x63\141\163\x65"]) && $this->case != $this->db_column_case)) { goto f6cef; } $query = $query->switch_case($this->case); f6cef: $query = $query->add($data); if ($query) { goto E9a0d; } $this->response[$this->crud->change_case("\x65\162\x72\x6f\x72\x73", $this->case)] = $this->crud->get_validation_errors(); $this->_response(); goto Acc7c; E9a0d: $this->response[$this->crud->change_case($this->_lang("\163\164\141\x74\165\x73"), $this->case)] = $this->_lang("\x73\x75\143\x63\x65\x73\x73"); $this->response[$this->crud->change_case($this->_lang("\143\157\144\145"), $this->case)] = 201; $this->response[$this->crud->change_case($this->_lang("\x6d\145\163\x73\141\147\x65"), $this->case)] = $this->_lang("\141\144\144\137\x73\165\x63\x63\x65\163\163\x66\x75\154"); if (count($query) == 1) { goto Eacb9; } $res = $query; $cased_name = $this->crud->change_case($this->_plural($base_table), $this->case); goto Dc19c; Eacb9: $res = $query[0]; $cased_name = $this->crud->change_case(singular($base_table), $this->case); Dc19c: $this->_response($res, $cased_name); Acc7c: } private function _patch() { $base_table = !empty($this->related_table) ? $this->related_table : $this->table; $handle_types = "\141\160\x70\154\151\x63\x61\x74\x69\157\156\x2f\x78\55\x77\x77\x77\x2d\x66\x6f\x72\x6d\x2d\165\x72\x6c\145\156\143\157\x64\145\x64"; $content_type = filter_input(INPUT_SERVER, "\x43\x4f\116\124\105\x4e\x54\x5f\x54\131\120\105"); parse_str(file_get_contents("\x70\150\x70\72\x2f\x2f\x69\x6e\160\165\x74"), $data); if (!empty($data) && $handle_types === $content_type) { goto e4938; } $data = $this->_upload_files($base_table); goto a49ad; e4938: $data = $this->crud->recursive_change_array_keys_case($data, $this->db_column_case); a49ad: if (!empty($data)) { goto d7469; } $this->response[$this->crud->change_case($this->_lang("\x65\x72\162\x6f\x72\163"), $this->case)] = [$this->crud->change_case($this->_lang("\x65\162\x72\x6f\x72"), $this->case) => $this->_lang("\x6e\157\x5f\165\x70\x64\x61\164\145\x5f\x70\141\x72\141\x6d\145\164\x65\x72")]; $this->_response(); d7469: $query = $this->crud->table($this->table); if (!(!empty($this->main_key) && !empty($this->related_table))) { goto Cd0de; } $query = $query->find($this->main_key, $this->related_table); Cd0de: if (!(!empty($this->main_key) && empty($this->related_table))) { goto fba35; } $query = $query->find($this->main_key); fba35: if (empty($this->get_params)) { goto Dac87; } $table_columns = array_column($this->table_columns[$base_table]["\x63\x6f\x6c\165\x6d\x6e\x73"], "\156\141\x6d\145"); foreach ($this->get_params as $key => $param) { $fixed_case = $this->crud->change_case($key, $this->db_column_case); if (!in_array($fixed_case, $table_columns)) { goto B470d; } $query = $query->where($fixed_case, $param); B470d: E33fa: } Fda05: Dac87: $fc_attach = $this->crud->change_case("\141\164\164\x61\x63\150", $this->db_column_case); if (!(!empty($data[$fc_attach]) && is_array($data[$fc_attach]))) { goto Fd977; } foreach ($data[$fc_attach] as $key => $attach) { $fc_key = $this->crud->change_case($key, $this->db_table_case); $query = $query->attach($fc_key, $attach); abf25: } B4bde: unset($data[$fc_attach]); Fd977: $fc_attach_new = $this->crud->change_case("\141\x74\164\141\143\150\x5f\156\145\167", $this->db_column_case); if (!(!empty($data[$fc_attach_new]) && is_array($data[$fc_attach_new]))) { goto Cbd9e; } foreach ($data[$fc_attach_new] as $key => $attach) { $fc_key = $this->crud->change_case($key, $this->db_table_case); $query = $query->attach_new($fc_key, $attach); ab233: } db0ac: unset($data[$fc_attach_new]); Cbd9e: $fc_sync = $this->crud->change_case("\x73\171\x6e\x63", $this->db_column_case); if (!(!empty($data[$fc_sync]) && is_array($data[$fc_sync]))) { goto F8bd3; } foreach ($data[$fc_sync] as $key => $sync) { $fc_key = $this->crud->change_case($key, $this->db_table_case); $query = $query->sync($fc_key, $sync); ba2da: } B817a: unset($data[$fc_sync]); F8bd3: $fc_sync_new = $this->crud->change_case("\163\x79\x6e\x63\x5f\x6e\145\x77", $this->db_column_case); if (!(!empty($data[$fc_sync_new]) && is_array($data[$fc_sync_new]))) { goto D8f05; } foreach ($data[$fc_sync_new] as $key => $sync) { $fc_key = $this->crud->change_case($key, $this->db_table_case); $query = $query->sync_new($fc_key, $sync); B6bac: } e5428: unset($data[$fc_sync_new]); D8f05: $fc_detach = $this->crud->change_case("\144\x65\164\141\143\x68", $this->db_column_case); if (!(!empty($data[$fc_detach]) && is_array($data[$fc_detach]))) { goto E4042; } foreach ($data[$fc_detach] as $key => $detach) { $fc_key = $this->crud->change_case($key, $this->db_table_case); $query = $query->detach($fc_key, $detach); D9b15: } c52b2: unset($data[$fc_detach]); E4042: if (empty($this->with)) { goto A9a5e; } foreach ($this->with as $with) { $query = $query->with($this->crud->change_case($with, $this->db_table_case)); A4946: } De00e: A9a5e: if (empty($this->has)) { goto e7f84; } foreach ($this->has as $has) { $query = $query->has($this->crud->change_case($has, $this->db_table_case)); D20ca: } f8a20: e7f84: if (!(empty($this->get_params["\143\x61\x73\145"]) && $this->case != $this->db_column_case)) { goto F83af; } $query = $query->switch_case($this->case); F83af: $query = $query->edit($data); if ($query) { goto b64a9; } $this->response[$this->crud->change_case($this->_lang("\145\162\x72\x6f\162\163"), $this->case)] = $this->ci->form_validation->error_assoc(); $this->_response(); goto Ac580; b64a9: $singular_name = $this->_singular($base_table); $this->response[$this->crud->change_case($this->_lang("\x73\164\x61\x74\x75\x73"), $this->case)] = $this->_lang("\163\x75\x63\143\145\163\x73"); $this->response[$this->crud->change_case($this->_lang("\x63\157\x64\x65"), $this->case)] = 200; $this->response[$this->crud->change_case($this->_lang("\x6d\145\x73\163\x61\147\x65"), $this->case)] = $this->_lang("\x65\144\151\164\x5f\x73\165\x63\143\x65\163\163\x66\x75\x6c"); $singular_name_case = $this->crud->change_case($singular_name, $this->case); $this->_response($query, $singular_name_case); Ac580: } private function _delete() { $base_table = !empty($this->related_table) ? $this->related_table : $this->table; $handle_types = "\x61\x70\160\154\151\x63\141\164\x69\157\156\57\x78\55\167\x77\167\x2d\146\157\162\155\x2d\x75\162\154\145\x6e\143\157\x64\145\x64"; $content_type = filter_input(INPUT_SERVER, "\x43\x4f\x4e\124\105\x4e\x54\x5f\124\x59\x50\105"); parse_str(file_get_contents("\x70\x68\160\72\57\x2f\151\156\160\165\164"), $data); if (!empty($data) && $handle_types === $content_type) { goto e1e24; } $data = NULL; goto b724c; e1e24: $data = $this->crud->recursive_change_array_keys_case($data, $this->db_column_case); $fc_ids = $this->crud->change_case("\151\144\163", $this->db_column_case); $data = empty($data[$fc_ids]) ? NULL : $data[$fc_ids]; b724c: $query = $this->crud->table($this->table); $where_counter = 0; if (!(!empty($this->main_key) && !empty($this->related_table))) { goto A699f; } $query = $query->find($this->main_key, $this->related_table); $where_counter = 1; A699f: if (!(!empty($this->main_key) && empty($this->related_table))) { goto e48c1; } $query = $query->find($this->main_key); $where_counter = 1; e48c1: if (empty($this->get_params)) { goto a0231; } $table_columns = array_column($this->table_columns[$base_table]["\x63\x6f\x6c\x75\x6d\x6e\x73"], "\x6e\x61\155\145"); foreach ($this->get_params as $key => $param) { $fixed_case = $this->crud->change_case($key, $this->db_column_case); if (!in_array($fixed_case, $table_columns)) { goto aca97; } $query = $query->where($fixed_case, $param); $where_counter++; aca97: c28f6: } f3387: a0231: if (!(empty($where_counter) && empty($data))) { goto Ba628; } $this->response[$this->crud->change_case($this->_lang("\x65\x72\162\x6f\x72\x73"), $this->case)] = [$this->crud->change_case($this->_lang("\145\162\x72\157\x72"), $this->case) => $this->_lang("\156\x6f\x5f\x64\145\154\x65\164\145\x5f\x70\141\162\141\x6d\145\x74\x65\162")]; $this->_response(); Ba628: if (!(empty($this->get_params["\143\141\x73\x65"]) && $this->case != $this->db_column_case)) { goto C383b; } $query = $query->switch_case($this->case); C383b: if (empty($data) && !empty($where_counter)) { goto E99a7; } $query = $query->delete($data); goto Bb892; E99a7: $query = $query->delete(); Bb892: if ($query) { goto a45b2; } $this->response[$this->crud->change_case($this->_lang("\145\x72\162\157\x72\163"), $this->case)] = $this->crud->get_validation_errors(); $this->_response(); goto a19ce; a45b2: $singular_name = $this->_singular($base_table); $plural_name = $this->_plural($base_table); $name = count($query) == 1 ? $singular_name : $plural_name; $this->response[$this->crud->change_case($this->_lang("\x73\x74\x61\x74\165\x73"), $this->case)] = $this->_lang("\163\165\x63\x63\145\163\163"); $this->response[$this->crud->change_case($this->_lang("\x63\x6f\144\145"), $this->case)] = 200; $this->response[$this->crud->change_case($this->_lang("\x6d\145\163\163\141\147\x65"), $this->case)] = $this->_lang("\x64\x65\x6c\145\x74\x65\137\163\x75\x63\x63\145\x73\163\146\165\x6c"); if (count($query) == 1) { goto cee71; } $res = $query; $cased_name = $this->crud->change_case($this->_plural($name), $this->case); goto F32ea; cee71: $res = $query[0]; $cased_name = $this->crud->change_case($this->_singular($name), $this->case); F32ea: $this->_response($res, $cased_name); a19ce: } public function response($data, $envelope = array("\163\x74\x61\164\x75\x73" => "\x53\165\x63\143\145\x73\163", "\x63\157\x64\x65" => 200), $config = array()) { $get_params = $this->crud->recursive_change_array_keys_case($_GET, "\x75\x6e\144\x65\x72\x73\x63\157\x72\145"); $cases = ["\143\141\155\145\x6c", "\x64\141\163\x68", "\x70\141\163\143\x61\x6c", "\163\x6e\141\153\x65", "\165\x6e\144\x65\x72\163\x63\x6f\x72\145"]; $case = isset($get_params["\x63\141\x73\x65"]) && in_array($get_params["\143\x61\163\x65"], $cases) ? $get_params["\x63\141\x73\145"] : $this->case; $case = isset($config["\x63\141\x73\145"]) && in_array($config["\x63\141\163\x65"], $cases) ? $config["\143\141\163\145"] : $case; $yes_values = ["\171\x65\163", "\x74\162\165\x65", "\61", 1]; if (!(isset($get_params["\145\x6e\166\x65\x6c\157\x70"]) && !in_array($get_params["\145\156\166\145\154\x6f\160"], $yes_values))) { goto ec91a; } $this->envelop = FALSE; ec91a: if (!(isset($config["\145\x6e\166\x65\154\157\x70"]) && in_array($config["\x65\x6e\x76\145\154\157\x70"], $yes_values))) { goto d51bc; } $this->envelop = FALSE; d51bc: $formats = ["\143\x73\166", "\x6a\163\x6f\156", "\x6a\163\x6f\156\x70", "\163\x65\162\x69\x61\154\x69\x7a\x65\x64", "\x78\x6d\x6c"]; $this->format = isset($get_params["\x66\157\x72\x6d\141\x74"]) && in_array($get_params["\146\157\162\155\141\164"], $formats) ? $get_params["\x66\157\x72\155\x61\x74"] : $this->format; $this->format = isset($config["\146\157\x72\155\141\x74"]) && in_array($config["\x66\157\162\155\x61\x74"], $formats) ? $config["\146\x6f\x72\x6d\141\x74"] : $this->format; $this->delimiter = isset($get_params["\x64\x65\154\151\x6d\145\x74\x65\x72"]) ? $get_params["\x64\x65\x6c\151\x6d\x65\x74\x65\x72"] : $this->delimiter; $this->delimiter = isset($config["\144\145\154\x69\155\145\x74\x65\162"]) ? $config["\x64\x65\154\x69\155\145\x74\145\162"] : $this->delimiter; $wrapper = isset($get_params["\167\162\141\x70\160\145\x72"]) ? $get_params["\167\x72\x61\160\160\145\162"] : "\144\141\164\x61"; $wrapper = isset($config["\167\x72\x61\x70\160\145\x72"]) ? $config["\x77\162\x61\x70\160\145\162"] : $wrapper; if (!$this->envelop) { goto ae51c; } foreach ($envelope as $key => $value) { $translated = $this->_lang($key) ? $this->_lang($key) : $key; $this->response[$this->crud->change_case($translated, $case)] = $value; cbaaf: } E7d8d: ae51c: if (!($case !== $this->case)) { goto e976c; } $data = $this->crud->recursive_change_array_keys_case($data, $case); e976c: $this->response[$this->crud->change_case($wrapper, $case)] = $data; $this->_response($data, $wrapper); } private function _response(&$data = array(), $wrapper = "\x64\x61\x74\x61") { $root = $wrapper === "\144\141\164\x61" ? "\x78\155\x6c" : $wrapper; if (empty($data)) { goto ca8a7; } if (!empty($this->wrapper) && is_string($this->wrapper)) { goto D1ce1; } $this->response[$wrapper] = $data; goto F345a; D1ce1: $case_wrapper = $this->crud->change_case($this->wrapper, $this->case); $this->response[$case_wrapper] = $data; $root = $case_wrapper; F345a: ca8a7: $response = $this->envelop ? $this->response : $data; $delimiter = $this->delimiter; $callback = $this->crud->change_case("\x63\141\x6c\x6c\x42\141\x63\153", $this->case); switch ($this->format) { case "\x78\x6d\x6c": header("\x43\157\x6e\x74\145\156\164\x2d\124\171\160\145\72\x20\x61\160\x70\154\x69\x63\x61\164\x69\157\156\x2f\170\155\154"); echo $this->_array_to_xml($data, $root); goto afdc8; case "\x73\x65\x72\151\x61\154\x69\x7a\145\144": header("\x43\157\156\x74\x65\156\164\x2d\x54\171\160\x65\72\40\164\145\x78\164\57\160\154\141\151\x6e"); echo serialize($response); goto afdc8; case "\x6a\163\x6f\156": header("\103\x6f\x6e\164\x65\x6e\x74\x2d\124\171\x70\x65\x3a\40\141\x70\160\x6c\x69\143\x61\164\x69\157\156\57\152\x73\157\156\73\40\x63\x68\x61\162\163\145\164\x3d\165\164\146\55\70"); echo json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES); goto afdc8; case "\152\163\x6f\156\x70": header("\x43\157\156\x74\145\156\x74\x2d\x54\x79\160\x65\72\40\141\160\160\x6c\x69\143\141\164\x69\157\156\x2f\x6a\141\x76\141\163\143\x72\151\160\164"); echo $callback . "\50" . json_encode($response) . "\x29"; goto afdc8; case "\x63\163\166": header("\x43\x6f\x6e\x74\145\x6e\164\x2d\124\171\x70\x65\72\40\x74\x65\170\164\x2f\143\163\x76\x3b\x20\143\150\x61\162\x73\x65\164\75\x75\x74\x66\x2d\x38"); echo $this->_array_to_csv($data, $delimiter); goto afdc8; default: header("\103\157\x6e\164\x65\x6e\164\55\124\x79\x70\145\72\40\x61\x70\x70\x6c\x69\143\141\x74\x69\x6f\x6e\x2f\152\x73\x6f\156\x3b\x20\143\150\x61\162\163\x65\x74\x3d\165\164\146\x2d\70"); echo json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES); } A5778: afdc8: exit; } private function _get_table_columns() { $table_details = []; $reference_tables = implode("\47\x2c\x27", $this->reference_tables); $sql = "\123\x45\x4c\x45\x43\124\40" . "\140\124\x41\102\114\105\x5f\x4e\101\115\105\x60\40\x61\x73\x20\140\x74\141\142\x6c\145\x60\x2c" . "\x60\x43\117\114\125\115\116\137\x4e\101\115\105\140\40\x61\x73\40\140\156\141\155\x65\140\x2c" . "\140\111\x53\x5f\x4e\125\x4c\x4c\101\x42\x4c\x45\x60\x20\141\x73\40\x60\x6e\165\154\154\140\54" . "\x60\x43\x4f\x4c\125\x4d\x4e\137\104\x45\106\x41\125\x4c\124\140\x20\141\x73\x20\140\x64\x65\x66\141\165\154\x74\x60\x2c" . "\x60\104\101\124\x41\x5f\124\x59\120\105\x60\x20\x61\163\x20\140\164\x79\x70\145\x60\54" . "\x60\x43\x4f\114\x55\x4d\116\137\124\131\x50\x45\x60\x20\141\x73\40\x60\x63\157\155\160\154\145\x74\x65\137\164\171\x70\145\140\x2c" . "\x60\103\110\101\122\101\x43\124\x45\122\137\115\x41\x58\x49\x4d\x55\115\x5f\x4c\x45\116\x47\x54\x48\x60\40\x61\163\x20\140\155\141\x78\140\54" . "\140\103\x4f\x4c\x55\115\116\x5f\113\105\131\x60\40\141\163\40\x60\153\x65\x79\x60\54" . "\x60\x45\x58\x54\x52\x41\140\x20\141\x73\40\x60\145\170\164\162\141\140" . "\40\x46\122\117\115\40\x49\116\106\117\122\x4d\101\x54\111\x4f\x4e\137\x53\103\110\x45\115\101\56\103\117\114\125\x4d\x4e\123" . "\x20\x57\110\105\122\x45\40\124\101\x42\x4c\x45\137\x4e\101\x4d\105\40\x49\116\40\50\47{$reference_tables}\47\51" . "\40\x41\x4e\x44\40\124\101\102\114\105\x5f\x53\103\x48\x45\x4d\x41\x20\x3d\x20\x3f"; $stmt = $this->mysqli->prepare($sql); $stmt->bind_param("\x73", $this->database); $stmt->execute(); $result = $stmt->get_result(); $columns = $result->fetch_all(MYSQLI_ASSOC); $result->free_result(); $stmt->close(); foreach ($columns as $column) { $table_name = preg_replace("\57" . $this->db_prefix . "\57", '', $column["\164\141\142\154\145"], 1); $column_name = $column["\156\141\155\145"]; $new_column = ["\156\x61\x6d\145" => $column_name, "\x74\x79\160\145" => $column["\164\171\x70\x65"], "\x63\x6f\155\160\x6c\x65\164\145\x5f\164\x79\x70\145" => $column["\x63\157\155\160\x6c\x65\164\145\137\164\x79\x70\x65"], "\144\145\x66\141\165\x6c\164" => $column["\x64\145\x66\x61\x75\154\164"], "\156\x75\154\x6c" => $column["\156\x75\x6c\154"] == "\x4e\117" ? TRUE : FALSE, "\x6d\141\170" => $column["\x6d\141\170"], "\153\145\x79" => $column["\153\145\171"], "\141\x75\x74\157\x5f\x69\x6e\x63\162\145\x6d\145\156\x74" => $column["\145\170\164\162\x61"] == "\141\165\x74\x6f\137\x69\x6e\x63\x72\145\x6d\145\x6e\164" ? TRUE : FALSE]; if (!($column["\153\x65\171"] == "\x50\122\x49")) { goto b99b7; } $table_details[$table_name]["\x70\162\151\x6d\141\x72\171\137\153\x65\171"] = $column_name; b99b7: $table_details[$table_name]["\143\x6f\x6c\165\155\x6e\x73"][$column_name] = $new_column; f0433: } B16cb: $this->table_columns = $table_details; return $table_details; } private function _array_to_xml($data, $root = null, $xml = null) { $decode = json_decode(json_encode($data), true); if (!is_null($xml)) { goto ff3a4; } $root = $root ? $this->crud->change_case($root, $this->case) : $this->crud->change_case("\x78\x6d\154", $this->case); $xml = new SimpleXMLElement("\74{$root}\x2f\x3e"); ff3a4: foreach ($decode as $key => $value) { if (is_array($value) || is_object($value)) { goto efa66; } $val = !empty($value) ? htmlspecialchars($value) : NULL; $xml->addChild($key, $val); goto D186f; efa66: if (is_numeric($key)) { goto E8f9f; } $this->_array_to_xml($value, $root, $xml->addChild($key)); goto a4f89; E8f9f: $single_name = $xml->getName() == $this->_singular($xml->getName()) ? "\x63\150\x69\154\x64\137" . $this->_singular($xml->getName()) : $this->_singular($xml->getName()); $this->_array_to_xml($value, $root, $xml->addChild($single_name)); a4f89: D186f: A3dc5: } b0765: return $xml->asXML(); } private function _array_to_csv($data, $delimiter = "\x2c") { $delimiter = "\42" . $delimiter . "\x22"; if (isset($data[0]) && is_array($data[0])) { goto F457f; } $headings = array_keys($data); $data = array($data); goto f7424; F457f: $headings = array_keys($data[0]); f7424: $csv = "\42" . implode($delimiter, $headings) . "\42" . PHP_EOL; foreach ($data as &$row) { foreach ($row as $key => $value) { if (!is_array($value)) { goto f1ed8; } $row[$key] = json_encode($value); f1ed8: e8be7: } c15ae: try { $row = str_replace("\x22", "\42\x22", $row); $csv .= "\42" . implode($delimiter, $row) . "\42" . PHP_EOL; } catch (\Exception $e) { $csv = lang("\165\156\141\142\154\145\137\143\x73\x76"); } ad421: } edb27: return $csv; } private function _plural($word) { $word = strtolower($word); if (!array_key_exists($word, $this->words)) { goto B2a01; } return $this->words[$word]; B2a01: foreach ($this->rules as $key => $rule) { if (!(substr($word, -strlen($key)) === $key)) { goto E02b4; } return substr($word, 0, strlen($word) - strlen($key)) . $rule; E02b4: Ddd56: } C4cd3: return $word . "\x73"; } private function _singular($word) { $word = strtolower($word); if (!in_array($word, $this->words)) { goto a5a33; } return $this->words[array_search($word, $this->words)]; a5a33: $rules = $this->rules; arsort($rules); foreach ($rules as $key => $rule) { if (!(substr($word, -strlen($rule)) === $rule)) { goto E7d72; } if (!($rule === "\x65\163")) { goto Cb539; } $single = substr($word, 0, strlen($word) - strlen($rule)); if (!(substr_compare($single, "\x72", -strlen("\x72")) === 0)) { goto Ea168; } return substr($word, 0, strlen($word) - strlen($rule)) . "\145"; Ea168: return substr($word, 0, strlen($word) - strlen($rule)); Cb539: return substr($word, 0, strlen($word) - strlen($rule)) . $key; E7d72: ff44e: } C62b9: if (!(substr_compare($word, "\163", -strlen("\163")) === 0)) { goto A620d; } return substr($word, 0, -1); A620d: return $word; } private function _dig_files($parent, $field_names, $key_path, $names, $types, $tmp_names, $errors, $sizes) { foreach ($field_names as $key => $name) { foreach ($name as $f => $field) { if (is_array($field)) { goto e346d; } $this->upload_files["{$parent}\x2e{$f}\56{$key}"] = ["\x6e\x61\x6d\145" => $field, "\x74\171\x70\x65" => $types[$key][$f], "\x74\155\160\x5f\x6e\x61\155\145" => $tmp_names[$key][$f], "\x65\x72\x72\x6f\162" => $errors[$key][$f], "\x73\151\x7a\x65" => $sizes[$key][$f], "\153\x65\x79" => "{$key_path}\56{$key}\56{$f}"]; goto C04af; e346d: $names = $field; $types = $types[$key][$f]; $tmp_names = $tmp_names[$key][$f]; $errors = $errors[$key][$f]; $sizes = $sizes[$key][$f]; $new_path = "{$key_path}\x2e{$key}\56{$f}"; $this->_dig_files($f, $field, $new_path, $names, $types, $tmp_names, $errors, $sizes); C04af: a6f80: } Fc1f5: a2024: } D4a5f: } private function _upload_files($table) { $raw_data = !empty(filter_input_array(INPUT_POST)) ? filter_input_array(INPUT_POST) : []; $data = $this->crud->recursive_change_array_keys_case($raw_data, $this->db_column_case); foreach ($_FILES as $key => $file) { if (is_array($file["\x6e\141\155\145"])) { goto b1ebd; } $file["\x6b\145\171"] = $key; $this->upload_files["{$table}\x2e{$key}"] = $file; goto a4325; b1ebd: foreach ($file["\x6e\x61\155\145"] as $k => $name) { foreach ($name as $f => $field) { if (is_array($field)) { goto Ca4e2; } $this->upload_files["{$key}\x2e{$f}\x2e{$k}"] = ["\x6e\141\155\145" => $field, "\x74\x79\160\145" => $_FILES[$key]["\x74\x79\160\x65"][$k][$f], "\164\155\160\137\x6e\x61\x6d\145" => $_FILES[$key]["\x74\x6d\160\x5f\156\141\155\145"][$k][$f], "\145\x72\x72\x6f\162" => $_FILES[$key]["\145\x72\x72\x6f\x72"][$k][$f], "\x73\151\x7a\x65" => $_FILES[$key]["\x73\x69\x7a\145"][$k][$f], "\x6b\145\x79" => "{$key}\x2e{$k}\x2e{$f}"]; goto E173c; Ca4e2: $names = $field; $types = $_FILES[$key]["\164\171\x70\x65"][$k][$f]; $tmp_names = $_FILES[$key]["\x74\155\160\137\x6e\141\155\145"][$k][$f]; $errors = $_FILES[$key]["\x65\162\162\x6f\x72"][$k][$f]; $sizes = $_FILES[$key]["\x73\x69\x7a\145"][$k][$f]; $key_path = "{$key}\x2e{$k}\56{$f}"; $this->_dig_files($f, $field, $key_path, $names, $types, $tmp_names, $errors, $sizes); E173c: fc4cd: } B10fc: A6273: } ac533: a4325: b60e0: } F2527: if (empty($this->upload_files)) { goto E6ec7; } $MAX_SIZE = (int) ini_get("\160\157\163\x74\x5f\155\141\170\137\163\x69\x7a\145") * 1000 * 1000; $ALLOWED_FILES = ["\x6a\160\147", "\x70\x6e\147"]; if (!is_string($this->config["\141\x6c\154\x6f\167\x65\x64\137\x66\151\154\x65\163"])) { goto F9071; } $ALLOWED_FILES = array_map(function ($value) { return strtolower(trim($value)); }, explode("\174", $this->config["\141\x6c\154\x6f\167\x65\x64\137\146\151\154\x65\x73"])); F9071: foreach ($this->upload_files as $key => $file) { if (!($file["\145\x72\162\157\x72"] == UPLOAD_ERR_OK)) { goto e8e45; } $sp = DIRECTORY_SEPARATOR; $names = explode("\56", $key); $column_plural_name = $this->crud->change_case($names[1], "\x75\x6e\144\145\x72\163\x63\x6f\x72\145"); $table_underscore_name = $this->crud->change_case($names[0], "\x75\156\144\145\x72\x73\143\157\x72\145"); $path = "\x2e{$sp}\165\160\154\x6f\x61\144\163{$sp}\155\171\163\x71\x6c\143\162\165\144\141\160\x69{$sp}{$table_underscore_name}{$sp}{$column_plural_name}"; $exts = explode("\56", $file["\x6e\x61\155\145"]); $file_ext = strtolower(end($exts)); if (!($file["\x73\151\x7a\x65"] > $MAX_SIZE)) { goto d42a7; } return FALSE; d42a7: if (!(!in_array("\x2a", $ALLOWED_FILES) && in_array($file_ext, $ALLOWED_FILES) === FALSE)) { goto Ac6be; } return FALSE; Ac6be: if (file_exists($path)) { goto b37c0; } mkdir($path, 0755, TRUE); b37c0: move_uploaded_file($file["\x74\155\x70\137\x6e\141\155\145"], $path . $sp . $file["\156\141\155\145"]); $keys = explode("\x2e", $file["\153\145\x79"]); foreach ($keys as $k => $segment) { if ($segment === reset($keys)) { goto C69bb; } if (!empty($cursor[$segment])) { goto f3598; } $cursor[$segment] = $segment === end($keys) ? $file["\x6e\141\155\145"] : []; $cursor =& $cursor[$segment]; goto fbcf3; f3598: $cursor[$segment] = $segment === end($keys) ? $file["\156\141\155\145"] : $cursor[$segment]; $cursor =& $cursor[$segment]; fbcf3: goto ff423; C69bb: if (!empty($data[$segment])) { goto e0fed; } $data[$segment] = $segment === end($keys) ? $file["\x6e\141\155\145"] : []; e0fed: $cursor =& $data[$segment]; ff423: f0bce: } Edaf1: e8e45: fd231: } Fc0c6: E6ec7: return $data; } private function _lang($key) { return isset($this->language[$key]) ? $this->language[$key] : ''; } }